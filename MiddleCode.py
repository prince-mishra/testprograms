import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class MiddleCode:
    def encode(self, s):
        s = list(s)
        t = []
        while len(s):
            l = len(s)
            if l%2==0:
                #even
                m1 = l/2 -1
                m2 = m1+1
                m = m1
                if s[m2] < s[m1]:
                    m = m2
            else:
                m = int(l/2)
            t.append(s[m])
            s.pop(m)
        return ''.join(t)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\""))
	print(str("]"))
	obj = MiddleCode()
	startTime = time.clock()
	answer = obj.encode(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p1) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = "word"
p1 = "ordw"
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = "aaaaa"
p1 = "aaaaa"
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = "abacaba"
p1 = "caabbaa"
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = "shjegr"
p1 = "ejghrs"
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = "adafaaaadafawafwfasdaa"
p1 = "afawadafawafaafsadadaa"
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Hero is learning a new algorithm to encode a string.
# You are given a string s that consists of lowercase letters only.
# Your task is to simulate the algorithm described below on this string, so that Hero can see how it works.
# 
# The algorithm starts with a given input string s and an empty output string t.
# The execution of the algorithm consists of multiple steps.
# In each step, s and t are modified as follows:
# 
# If the length of s is odd, the middle character of s is added to the end of t, and then deleted from s.
# If the length of s is even, the two characters in the middle of s are compared. The smaller one of them (either one in case of a tie) is added to the end of t, and then deleted from s.
# 
# If after some step the string s is empty, the algorithm terminates.
# The output of the algorithm is the final string t.
# 
# Return the string t that will be produced by the above algorithm for the given string s.
# 
# DEFINITION
# Class:MiddleCode
# Method:encode
# Parameters:string
# Returns:string
# Method signature:def encode(self, s):
# 
# 
# NOTES
# -When comparing letters, the smaller one is the one earlier in the alphabet - i.e., the character with the smaller ASCII code.
# 
# 
# CONSTRAINTS
# -s will contain between 1 and 50 characters, inclusive.
# -Each character in s will be a lowercase letter ('a'-'z').
# 
# 
# EXAMPLES
# 
# 0)
# "word"
# 
# Returns: "ordw"
# 
# 
# In the first step, 'o' is smaller than 'r', thus 'o' is selected.
# After the first step: s="wrd", t="o".
# After the second step: s="wd", t="or".
# In the third step, 'w' is greater than 'd', thus 'd' is selected.
# After the third step: s="w", t="ord".
# After the fourth step: s="", t="ordw", and the algorithm terminates.
# 
# 
# 1)
# "aaaaa"
# 
# Returns: "aaaaa"
# 
# 
# 
# 2)
# "abacaba"
# 
# Returns: "caabbaa"
# 
# 
# 
# 3)
# "shjegr"
# 
# Returns: "ejghrs"
# 
# 
# 
# 4)
# "adafaaaadafawafwfasdaa"
# 
# Returns: "afawadafawafaafsadadaa"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
