import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class InsertZ:
    def canTransform(self, init, goal):
        goal_without_z = goal.replace('z', '')
        ret = "No"
        if goal_without_z == init:
        	ret = "Yes"
        return ret

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\"") + str(",") + str("\"") + str(p1) + str("\""))
	print(str("]"))
	obj = InsertZ()
	startTime = time.clock()
	answer = obj.canTransform(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p2) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = "fox"
p1 = "fozx"
p2 = "Yes"
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = "fox"
p1 = "zfzoxzz"
p2 = "Yes"
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = "foon"
p1 = "foon"
p2 = "Yes"
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = "topcoder"
p1 = "zopzoder"
p2 = "No"
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = "aaaaaaaaaa"
p1 = "a"
p2 = "No"
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = "mvixrdnrpxowkasufnvxaq"
p1 = "mvizzxzzzrdzznzrpxozzwzzkazzzszzuzzfnvxzzzazzq"
p2 = "Yes"
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 6 -----
disabled = False
p0 = "opdlfmvuicjsierjowdvnx"
p1 = "zzopzdlfmvzuicjzzsizzeijzowvznxzz"
p2 = "No"
all_right = (disabled or KawigiEdit_RunTest(6, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# You are given two strings: init and goal.
# Both init and goal contain lowercase letters only.
# Additionally, init does not contain the character 'z'.
# 
# 
# Your goal is to transform init into goal.
# The only operation you are allowed to do is to insert the character 'z' anywhere into init.
# You can repeat the operation as many times as you want, and each time you can choose any position where to insert the 'z'.
# 
# 
# For example, if init="fox", you can transform it to "fzox" in one operation.
# Alternately, you can transform "fox" into "zzzfoxzzz" in six operations.
# It is not possible to transform "fox" into any of the strings "fx", "foz", "fxo", "foxy".
# 
# 
# Return "Yes" (quotes for clarity) if it is possible to transform init into goal.
# Otherwise, return "No".
# 
# 
# 
# DEFINITION
# Class:InsertZ
# Method:canTransform
# Parameters:string, string
# Returns:string
# Method signature:def canTransform(self, init, goal):
# 
# 
# NOTES
# -Note that the return value is case sensitive.
# 
# 
# CONSTRAINTS
# -init and goal will each contain between 1 and 50 characters, inclusive.
# -Each character of init and goal will be a lowercase letter ('a'-'z').
# -init will not contain the letter 'z'.
# 
# 
# EXAMPLES
# 
# 0)
# "fox"
# "fozx"
# 
# Returns: "Yes"
# 
# By inserting 'z' to the position bettween 'o' and 'x' in "fox", we obtain "fozx".
# 
# 1)
# "fox"
# "zfzoxzz"
# 
# Returns: "Yes"
# 
# You may perform the operation multiple times.
# 
# 2)
# "foon"
# "foon"
# 
# Returns: "Yes"
# 
# In this case init and goal are equal. You do not have to perform the operation.
# 
# 3)
# "topcoder"
# "zopzoder"
# 
# Returns: "No"
# 
# 
# 
# 4)
# "aaaaaaaaaa"
# "a"
# 
# Returns: "No"
# 
# 
# 
# 5)
# "mvixrdnrpxowkasufnvxaq"
# "mvizzxzzzrdzznzrpxozzwzzkazzzszzuzzfnvxzzzazzq"
# 
# Returns: "Yes"
# 
# 
# 
# 6)
# "opdlfmvuicjsierjowdvnx"
# "zzopzdlfmvzuicjzzsizzeijzowvznxzz"
# 
# Returns: "No"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
