import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class KeyDungeonDiv2:
    def countDoors(self, doorR, doorG, keys):
        
        return

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p2)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p2[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = KeyDungeonDiv2()
	startTime = time.clock()
	answer = obj.countDoors(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p3))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (2,0,5,3)
p1 = (1,4,0,2)
p2 = (2,3,1)
p3 = 3
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (0,1,2,0)
p1 = (0,2,3,1)
p2 = (0,0,0)
p3 = 1
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (3,5,4,2,8)
p1 = (4,2,3,8,1)
p2 = (0,0,10)
p3 = 5
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (4,5,4,6,8)
p1 = (2,1,2,3,5)
p2 = (1,2,1)
p3 = 0
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (41,44,41,57,58,74,84,100,58,2,43,32,82,97,44,13,35,98,96,81,43,77,18,51,27,27,39,39,45,82,59,20,28,93,6,39,64,78,28,85,17,56,3,68,4,0,36,80,41,77)
p1 = (67,15,53,36,88,29,26,57,68,99,97,27,51,70,3,49,65,75,35,92,66,0,23,96,38,86,98,31,26,75,30,2,92,78,100,99,38,26,85,74,77,15,16,48,100,88,55,93,99,54)
p2 = (39,31,34)
p3 = 17
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# You are exploring a dungeon.
# In the dungeon you found some locked doors.
# Each locked door has some red and some green keyholes (zero or more of each kind).
# In order to open a door, you must insert fitting keys into all its keyholes simultaneously.
# Once you open a door, you may take all the keys back and possibly reuse some of them later to open other doors. 
# 
# There are three kinds of keys: red, green, and white ones.
# Each red key fits into any red keyhole.
# Each green key fits into any green keyhole.
# Each white key fits into any keyhole (both red and green ones). 
# 
# You are given tuple (integer)s doorR and doorG.
# These two tuple (integer)s have the same length.
# For each valid i, the values doorR[i] and doorG[i] describe one of the doors you found:
# a door with doorR[i] red and doorG[i] green keyholes. 
# 
# You are also given the tuple (integer) keys with three elements:
# keys[0] is the number of red keys, keys[1] the number of green keys, and keys[2] the number of white keys you have at the beginning. 
# 
# Return the number of doors you can open with keys you have.
# 
# DEFINITION
# Class:KeyDungeonDiv2
# Method:countDoors
# Parameters:tuple (integer), tuple (integer), tuple (integer)
# Returns:integer
# Method signature:def countDoors(self, doorR, doorG, keys):
# 
# 
# CONSTRAINTS
# -doorR and doorG will each contain between 1 and 50 elements, inclusive.
# -doorR and doorG will contain the same number of elements.
# -Each element of doorR and doorG will be between 0 and 100, inclusive.
# -keys will contain exactly 3 elements.
# -Each element of keys will be between 0 and 100, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {2, 0, 5, 3}
# {1, 4, 0, 2}
# {2, 3, 1}
# 
# Returns: 3
# 
# There are 4 doors. You have 2 red keys, 3 green keys, 1 white key.
# You can open 3 of the doors:
# 
# You can open door 0, using 2 red keys and 1 green key.
# You can open door 1, using 3 green keys and 1 white key. Here you insert the white key into one of the green keyholes.
# You can't open door 2, for you have only 3 keys that can be inserted into red key holes.
# You can open door 3, using 2 red keys, 2 green keys, and 1 white key. Here you insert the white key into one of the red keyholes.
# 
# 
# 1)
# {0, 1, 2, 0}
# {0, 2, 3, 1}
# {0, 0, 0}
# 
# Returns: 1
# 
# You have no key at all, but door 0 also has no keyhole. Therefore, you can open door 0.
# 
# 
# 2)
# {3, 5, 4, 2, 8}
# {4, 2, 3, 8, 1}
# {0, 0, 10}
# 
# Returns: 5
# 
# 
# 
# 3)
# {4, 5, 4, 6, 8}
# {2, 1, 2, 3, 5}
# {1, 2, 1}
# 
# Returns: 0
# 
# 
# 
# 4)
# {41,44,41,57,58,74,84,100,58,2,43,32,82,97,44,13,35,98,96,81,43,77,18,51,27,
#  27,39,39,45,82,59,20,28,93,6,39,64,78,28,85,17,56,3,68,4,0,36,80,41,77}
# {67,15,53,36,88,29,26,57,68,99,97,27,51,70,3,49,65,75,35,92,66,0,23,96,38,86,
#  98,31,26,75,30,2,92,78,100,99,38,26,85,74,77,15,16,48,100,88,55,93,99,54}
# {39,31,34}
# 
# Returns: 17
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
